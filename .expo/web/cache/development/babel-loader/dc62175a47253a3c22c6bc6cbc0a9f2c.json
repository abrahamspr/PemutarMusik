{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Project-AS\\\\Musik\\\\components\\\\PlayerWidget\\\\index.tsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { AntDesign, FontAwesome } from \"@expo/vector-icons\";\nimport { API, graphqlOperation } from 'aws-amplify';\nimport styles from \"./styles\";\nimport { Sound } from \"expo-av/build/Audio/Sound\";\nimport { AppContext } from \"../../AppContext\";\nimport { getSong } from \"../../src/graphql/queries\";\n\nvar PlayerWidget = function PlayerWidget() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      song = _useState2[0],\n      setSong = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sound = _useState4[0],\n      setSound = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isPlaying = _useState6[0],\n      setIsPlaying = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      duration = _useState8[0],\n      setDuration = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      position = _useState10[0],\n      setPosition = _useState10[1];\n\n  var _useContext = useContext(AppContext),\n      songId = _useContext.songId;\n\n  useEffect(function () {\n    var fetchSong = function fetchSong() {\n      var data;\n      return _regeneratorRuntime.async(function fetchSong$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getSong, {\n                id: songId\n              })));\n\n            case 3:\n              data = _context.sent;\n              setSong(data.data.getSong);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    fetchSong();\n  }, [songId]);\n\n  var onPlaybackStatusUpdate = function onPlaybackStatusUpdate(status) {\n    setIsPlaying(status.isPlaying);\n    setDuration(status.durationMillis);\n    setPosition(status.positionMillis);\n  };\n\n  var playCurrentSong = function playCurrentSong() {\n    var _await$Sound$createAs, newSound;\n\n    return _regeneratorRuntime.async(function playCurrentSong$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!sound) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(sound.unloadAsync());\n\n          case 3:\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(Sound.createAsync({\n              uri: song.uri\n            }, {\n              shouldPlay: isPlaying\n            }, onPlaybackStatusUpdate));\n\n          case 5:\n            _await$Sound$createAs = _context2.sent;\n            newSound = _await$Sound$createAs.sound;\n            setSound(newSound);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    if (song) {\n      playCurrentSong();\n    }\n  }, [song]);\n\n  var onPlayPausePress = function onPlayPausePress() {\n    return _regeneratorRuntime.async(function onPlayPausePress$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (sound) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 2:\n            if (!isPlaying) {\n              _context3.next = 7;\n              break;\n            }\n\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(sound.stopAsync());\n\n          case 5:\n            _context3.next = 9;\n            break;\n\n          case 7:\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(sound.playAsync());\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getProgress = function getProgress() {\n    if (sound === null || duration === null || position === null) {\n      return 0;\n    }\n\n    return position / duration * 100;\n  };\n\n  if (!song) {\n    return null;\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: [styles.progress, {\n      width: getProgress() + \"%\"\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: song.imageUri\n    },\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.rightContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.nameContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, song.title), React.createElement(Text, {\n    style: styles.artist,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, song.artist)), React.createElement(View, {\n    style: styles.iconsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, React.createElement(AntDesign, {\n    name: \"hearto\",\n    size: 30,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: onPlayPausePress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, React.createElement(FontAwesome, {\n    name: isPlaying ? 'pause' : 'play',\n    size: 30,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default PlayerWidget;","map":{"version":3,"sources":["D:/Project-AS/Musik/components/PlayerWidget/index.tsx"],"names":["React","useContext","useEffect","useState","AntDesign","FontAwesome","API","graphqlOperation","styles","Sound","AppContext","getSong","PlayerWidget","song","setSong","sound","setSound","isPlaying","setIsPlaying","duration","setDuration","position","setPosition","songId","fetchSong","graphql","id","data","console","log","onPlaybackStatusUpdate","status","durationMillis","positionMillis","playCurrentSong","unloadAsync","createAsync","uri","shouldPlay","newSound","onPlayPausePress","stopAsync","playAsync","getProgress","container","progress","width","row","imageUri","image","rightContainer","nameContainer","title","artist","iconsContainer"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {Text, Image, View, TouchableOpacity} from 'react-native';\r\nimport { AntDesign, FontAwesome } from \"@expo/vector-icons\";\r\nimport { API, graphqlOperation } from 'aws-amplify';\r\n\r\nimport styles from './styles';\r\nimport {Song} from \"../../types\";\r\nimport {Sound} from \"expo-av/build/Audio/Sound\";\r\n\r\nimport { AppContext } from '../../AppContext';\r\nimport {getSong} from \"../../src/graphql/queries\";\r\n\r\nconst PlayerWidget = () => {\r\n\r\n  const [song, setSong] = useState(null);\r\n  const [sound, setSound] = useState<Sound|null>(null);\r\n  const [isPlaying, setIsPlaying] = useState<boolean>(true);\r\n  const [duration, setDuration] = useState<number|null>(null);\r\n  const [position, setPosition] = useState<number|null>(null);\r\n\r\n  const { songId } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    const fetchSong = async () => {\r\n      try {\r\n        const data = await API.graphql(graphqlOperation(getSong, { id: songId }))\r\n        setSong(data.data.getSong);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n\r\n    fetchSong();\r\n  }, [songId])\r\n\r\n  const onPlaybackStatusUpdate = (status) => {\r\n    setIsPlaying(status.isPlaying);\r\n    setDuration(status.durationMillis);\r\n    setPosition(status.positionMillis);\r\n  }\r\n\r\n  const playCurrentSong = async () => {\r\n    if (sound) {\r\n      await sound.unloadAsync();\r\n    }\r\n\r\n    const { sound: newSound } = await Sound.createAsync(\r\n      { uri: song.uri },\r\n      { shouldPlay: isPlaying },\r\n      onPlaybackStatusUpdate\r\n    )\r\n\r\n    setSound(newSound)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (song) {\r\n      playCurrentSong();\r\n    }\r\n  }, [song])\r\n\r\n  const onPlayPausePress = async () => {\r\n    if (!sound) {\r\n      return;\r\n    }\r\n    if (isPlaying) {\r\n      await sound.stopAsync();\r\n    } else {\r\n      await sound.playAsync();\r\n    }\r\n  }\r\n\r\n  const getProgress = () => {\r\n    if (sound === null || duration === null || position === null) {\r\n      return 0;\r\n    }\r\n\r\n    return (position / duration) * 100;\r\n  }\r\n\r\n  if (!song) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={[styles.progress, { width: `${getProgress()}%`}]} />\r\n      <View style={styles.row}>\r\n        <Image source={{ uri: song.imageUri }} style={styles.image} />\r\n        <View style={styles.rightContainer}>\r\n          <View style={styles.nameContainer}>\r\n            <Text style={styles.title}>{song.title}</Text>\r\n            <Text style={styles.artist}>{song.artist}</Text>\r\n          </View>\r\n\r\n          <View style={styles.iconsContainer}>\r\n            <AntDesign name=\"hearto\" size={30} color={\"white\"}/>\r\n            <TouchableOpacity onPress={onPlayPausePress}>\r\n              <FontAwesome name={isPlaying ? 'pause' : 'play'} size={30} color={\"white\"}/>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default PlayerWidget;\r\n"]},"metadata":{},"sourceType":"module"}